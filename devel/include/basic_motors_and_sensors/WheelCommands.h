// Generated by gencpp from file basic_motors_and_sensors/WheelCommands.msg
// DO NOT EDIT!


#ifndef BASIC_MOTORS_AND_SENSORS_MESSAGE_WHEELCOMMANDS_H
#define BASIC_MOTORS_AND_SENSORS_MESSAGE_WHEELCOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace basic_motors_and_sensors
{
template <class ContainerAllocator>
struct WheelCommands_
{
  typedef WheelCommands_<ContainerAllocator> Type;

  WheelCommands_()
    : commandL(0.0)
    , commandR(0.0)  {
    }
  WheelCommands_(const ContainerAllocator& _alloc)
    : commandL(0.0)
    , commandR(0.0)  {
  (void)_alloc;
    }



   typedef float _commandL_type;
  _commandL_type commandL;

   typedef float _commandR_type;
  _commandR_type commandR;





  typedef boost::shared_ptr< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> const> ConstPtr;

}; // struct WheelCommands_

typedef ::basic_motors_and_sensors::WheelCommands_<std::allocator<void> > WheelCommands;

typedef boost::shared_ptr< ::basic_motors_and_sensors::WheelCommands > WheelCommandsPtr;
typedef boost::shared_ptr< ::basic_motors_and_sensors::WheelCommands const> WheelCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator1> & lhs, const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator2> & rhs)
{
  return lhs.commandL == rhs.commandL &&
    lhs.commandR == rhs.commandR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator1> & lhs, const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace basic_motors_and_sensors

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "178021d2695cd48d61727e5fa7defa6f";
  }

  static const char* value(const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x178021d2695cd48dULL;
  static const uint64_t static_value2 = 0x61727e5fa7defa6fULL;
};

template<class ContainerAllocator>
struct DataType< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "basic_motors_and_sensors/WheelCommands";
  }

  static const char* value(const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 commandL\n"
"float32 commandR\n"
;
  }

  static const char* value(const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commandL);
      stream.next(m.commandR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::basic_motors_and_sensors::WheelCommands_<ContainerAllocator>& v)
  {
    s << indent << "commandL: ";
    Printer<float>::stream(s, indent + "  ", v.commandL);
    s << indent << "commandR: ";
    Printer<float>::stream(s, indent + "  ", v.commandR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASIC_MOTORS_AND_SENSORS_MESSAGE_WHEELCOMMANDS_H
